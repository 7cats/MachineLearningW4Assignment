fit <- train(classe ~ .,data = ktraining, method = algo)
kpred <- predict(fit, ktesting)
confMatrx <- confusionMatrix(table(kpred,ktesting$classe))
kModelFit <- list(fit, kpred, confMatrx)
return(kModelFit)
}
testModel <- trainModel(kFolds[[1]], algo = 'rf')
library(dplyr)
library(caret)
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
checkNullNa <-  function(x)
{
if(sum(x == '' | is.na(x) | is.null(x)) > 0)
FALSE
else
TRUE
}
selectVar <- apply(training, MARGIN = 2, checkNullNa)
training <- training[selectVar]
# testing <- testing[selectVar]
training <- training[,-c(1:7)]  # deleting the date column
training$classe <- as.factor(training$classe)
testing <- testing[,-5]
set.seed(125)
kFolds <- createFolds(training$class, k = 10) # create 10 folds of data
trainModel <- function(fold, algo) # algo is algorithm
{
if (algo != 'rf' && algo != 'gbm' && algo != 'nb')
stop('input algorithm name is not a chosen one! Choose from rf, gbm or nb.')
ktraining <- training[fold,]
ktesting <- training[-fold,]
fit <- train(classe ~ .,data = ktraining, method = algo)
kpred <- predict(fit, ktesting)
confMatrx <- confusionMatrix(table(kpred,ktesting$classe))
kModelFit <- list(fit, kpred, confMatrx)
return(kModelFit)
}
testModel <- trainModel(kFolds[[1]], algo = 'rf')
View(testModel)
testModel <- trainModel(kFolds[[1]], algo = 'bgm')
testModel <- trainModel(kFolds[[1]], algo = 'gbm')
View(testModel)
testModel <- trainModel(kFolds[[1]], algo = 'nb')
remove(testModel)
testModel <- trainModel(kFolds[[1]], algo = 'nb')
warnings()
testData <- testModel[[3]]
View(testData)
testData
library(dplyr)
library(caret)
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
checkNullNa <-  function(x)
{
if(sum(x == '' | is.na(x) | is.null(x)) > 0)
FALSE
else
TRUE
}
selectVar <- apply(training, MARGIN = 2, checkNullNa)
training <- training[selectVar]
# testing <- testing[selectVar]
training <- training[,-c(1:7)]  # deleting the date column
training$classe <- as.factor(training$classe)
testing <- testing[,-5]
set.seed(125)
trainModel <- function(fold, algo) # algo is algorithm
{
if (algo != 'rf' && algo != 'gbm' && algo != 'nb')
stop('input algorithm name is not a chosen one! Choose from rf, gbm or nb.')
ktraining <- training[-fold,]
ktesting <- training[fold,]
fit <- train(classe ~ .,data = ktraining, method = algo)
kpred <- predict(fit, ktesting)
confMatrx <- confusionMatrix(table(kpred,ktesting$classe))
kModelFit <- list(fit, kpred, confMatrx)
return(kModelFit)
}
kFolds <- createFolds(training$class, k = 10) # create 10 folds of data
kFitDT <- sapply(kFolds, function(x) trainModel(x, algo = 'rpart'))
set.seed(125)
trainModel <- function(fold, algo) # algo is algorithm
{
if (algo != 'rf' && algo != 'gbm' && algo != 'nb' && algo != 'rpart')
stop('input algorithm name is not a chosen one! Choose from rf, gbm or nb.')
ktraining <- training[-fold,]
ktesting <- training[fold,]
fit <- train(classe ~ .,data = ktraining, method = algo)
kpred <- predict(fit, ktesting)
confMatrx <- confusionMatrix(table(kpred,ktesting$classe))
kModelFit <- list(fit, kpred, confMatrx)
return(kModelFit)
}
kFitDT <- sapply(kFolds, function(x) trainModel(x, algo = 'rpart'))
View(kFitDT)
fold1 <- kFolds[[1]]
TestFitRF <- strainModel(fold1, algo = 'rf'))
system.time(TestFitRF <- strainModel(fold1, algo = 'rf'))
system.time(TestFitRF <- trainModel(fold1, algo = 'rf'))
tGBM <- system.time(TestFitGBM <- trainModel(fold1, algo = 'gbm'))
tNB <- system.time(TestFitGBM <- trainModel(fold1, algo = 'nb'))
warnings()
View(TestFitGBM)
TestFitGBM[[3]]
TestFitGBM[[3]]$table
TestFitGBM[[3]]$overall
class(TestFitGBM[[3]]$overall)
TestFitGBM[[3]]$overall[1]
tNB <- system.time(TestFitNB <- trainModel(fold1, algo = 'nb'))
tGBM <- system.time(TestFitGBM <- trainModel(fold1, algo = 'gbm'))
predGroup <- as.data.frame(TestFitRF[[2]], TestFitGBM[[2]], TestFitNB[[2]])
predGroup <- as.data.frame(RF = TestFitRF[[2]], GBM = TestFitGBM[[2]], NB = TestFitNB[[2]])
predGroup <- colbind( RF = TestFitRF[[2]], GBM = TestFitGBM[[2]], NB = TestFitNB[[2]])
predGroup <- cbind( RF = TestFitRF[[2]], GBM = TestFitGBM[[2]], NB = TestFitNB[[2]])
View(kFolds)
View(predGroup)
summary(predGroup)
kFitDT <- sapply(kFolds, function(x) trainModel(x, algo = 'rpart'))
View(kFitDT)
test1 <- kFitDT[1]
test1 <- kFitDT[2]
View(test1)
test1 <- kFitDT[[2]]
View(test1)
test1 <- kFitDT[2]
class(test1)
View(test1)
View(kFitDT)
View(trainModel())
View(trainModel
)
kFitDT <- sapply(kFolds, function(x) trainModel(x, algo = 'rpart'))
View(kFolds)
View(kFitDT)
object.size(kFitDT)
View(kFitDT)
View(TestFitNB)
View(TestFitNB)
object.size(TestFitGBM[1])
TestFitGBM[[1]]$finalModel$train.error
TestFitRF[[1]]$results
TestFitGBM[[1]]$results
TestFitGBM[[1]]$pred
trainModel <- function(fold, algo) # algo is algorithm
{
# if (algo != 'rf' && algo != 'gbm' && algo != 'nb')
if (algo != 'rf' && algo != 'gbm' && algo != 'nb' && algo != 'rpart')
stop('input algorithm name is not a chosen one! Choose from rf, gbm or nb.')
ktraining <- training[-fold,]
ktesting <- training[fold,]
fit <- train(classe ~ .,data = ktraining, method = algo)
kpred <- predict(fit, ktesting)
confMatrx <- confusionMatrix(table(kpred,ktesting$classe))
kModelFit <- list(fit, kpred, confMatrx)
return(kModelFit)
}rg
trainModel <- function(fold, algo) # algo is algorithm
{
# if (algo != 'rf' && algo != 'gbm' && algo != 'nb')
if (algo != 'rf' && algo != 'gbm' && algo != 'nb' && algo != 'rpart')
stop('input algorithm name is not a chosen one! Choose from rf, gbm or nb.')
ktraining <- training[-fold,]
ktesting <- training[fold,]
fit <- train(classe ~ .,data = ktraining, method = algo)
kpred <- predict(fit, ktesting)
confMatrx <- confusionMatrix(table(kpred,ktesting$classe))
kModelFit <- list(fit, kpred, confMatrx)
return(kModelFit)
}
View(kFitDT)
accNum <- c(1:3:30)
accNum <- seq(3,30,by = 3)
accMatrx <- kFitDT[[accNum]]
accMatrx <- kFitDT[[3]]
accMatrx <- kFitDT[[accNum,]]
accMatrx <- kFitDT[accNum]
View(accMatrx)
View(TestFitGBM)
View(TestFitRF)
View(TestFitRF)
View(TestFitNB)
View(TestFitGBM)
View(TestFitNB)
View(kFitDT)
View(kFitDT)
kFitDT <- lapply(kFolds, function(x) trainModel(x, algo = 'rpart'))
kFitDT <- lapply(kFolds, function(x) trainModel(x, algo = 'rpart'))
library(dplyr)
library(caret)
kFitDT <- lapply(kFolds, function(x) trainModel(x, algo = 'rpart'))
View(kFitDT)
kFitDT <- lapply(kFolds, function(x) trainModel(x, algo = 'rpart'))
View(kFitDT)
kFitDT <- sapply(kFolds, function(x) trainModel(x, algo = 'rpart'))
View(kFitDT)
trainModel <- function(fold, algo) # algo is algorithm
{
# if (algo != 'rf' && algo != 'gbm' && algo != 'nb')
if (algo != 'rf' && algo != 'nb' && algo != 'rpart')
stop('input algorithm name is not a chosen one! Choose from rf, gbm or nb.')
ktraining <- training[-fold,]
ktesting <- training[fold,]
fit <- train(classe ~ .,data = ktraining, method = algo)
kpred <- predict(fit, ktesting)
confMatrx <- confusionMatrix(table(kpred,ktesting$classe))
kModelFit <- list(fit, kpred, confMatrx)
return(kModelFit)
}
View(kFolds)
set.seed(125)
kFolds <- createFolds(training$class, k = 3)
View(kFitDT)
View(kFolds)
kFitDT <- lapply(kFolds, function(x) trainModel(x, algo = 'rpart'))
View(kFitDT)
TestFitDT <- trainModel(fold1,'rpart')
View(TestFitDT)
View(kFolds)
kFitDT <- lapply(kFolds, function(x) trainModel(x, algo = 'rpart'))
View(kFitDT)
kFitDT <- sapply(kFolds, function(x) trainModel(x, algo = 'rpart'))
View(kFitDT)
View(kFitDT)
remove(kFitDT)
kFitDT <- sapply(kFolds, function(x) trainModel(x, algo = 'rpart'))
View(kFitDT)
kFitGLM <- sapply(kFolds, function(x) trainModel(x, algo = 'glm'))
trainModel <- function(fold, algo) # algo is algorithm
{
# if (algo != 'rf' && algo != 'gbm' && algo != 'nb')
if (algo != 'rf' && algo != 'nb' && algo != 'rpart')
stop('input algorithm name is not a chosen one! Choose from rf, gbm or nb.')
ktraining <- training[-fold,]
ktesting <- training[fold,]
fit <- train(classe ~ .,data = ktraining, method = algo)
kpred <- predict(fit, ktesting)
confMatrx <- confusionMatrix(table(kpred,ktesting$classe))
kModelFit <- list(fit, kpred, confMatrx)
return(kModelFit)
}
kFitGLM <- sapply(kFolds, function(x) trainModel(x, algo = 'glm'))
trainModel <- function(fold, algo) # algo is algorithm
{
# if (algo != 'rf' && algo != 'gbm' && algo != 'nb')
if (algo != 'rf' && algo != 'nb' && algo != 'rpart')
stop('input algorithm name is not a chosen one! Choose from rf, gbm or nb.')
ktraining <- training[-fold,]
ktesting <- training[fold,]
fit <- train(classe ~ .,data = ktraining, method = algo)
kpred <- predict(fit, ktesting)
confMatrx <- confusionMatrix(table(kpred,ktesting$classe))
kModelFit <- list(fit, kpred, confMatrx)
return(kModelFit)
}
kFitGLM <- sapply(kFolds, function(x) trainModel(x, algo = 'glm'))
remove(list = ls())
library(dplyr)
library(caret)
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
checkNullNa <-  function(x)
{
if(sum(x == '' | is.na(x) | is.null(x)) > 0)
FALSE
else
TRUE
}
selectVar <- apply(training, MARGIN = 2, checkNullNa)
training <- training[selectVar]
training <- training[,-c(1:7)]  # deleting the date column
training$classe <- as.factor(training$classe)
set.seed(125)
trainModel <- function(fold, algo) # algo is algorithm
{
# if (algo != 'rf' && algo != 'gbm' && algo != 'nb')
if (algo != 'rf' && algo != 'nb' && algo != 'rpart')
stop('input algorithm name is not a chosen one! Choose from rf, gbm or nb.')
ktraining <- training[-fold,]
ktesting <- training[fold,]
fit <- train(classe ~ .,data = ktraining, method = algo)
kpred <- predict(fit, ktesting)
confMatrx <- confusionMatrix(table(kpred,ktesting$classe))
kModelFit <- list(fit, kpred, confMatrx)
return(kModelFit)
}
View(trainModel())
View(trainModel
)
kFolds <- createFolds(training$class, k = 3) # create 5 folds of data
kFitDT <- lapply(kFolds, function(x) trainModel(x, algo = 'rpart'))
View(kFolds)
View(kFitDT)
accuDT <- kFitDT[[3]]
View(accuDT)
accuDT <- kFitDT[[3]][[3]]
View(accuDT)
View(accuDT)
c(1:3)
kFitDT[[3]][[3]]$overall[1]
accuDT <- apply(c(1:3), function(x) kFitDT[[x]][[3]]$overall[1])
accuDT <- apply(c(1:3), kFitDT[[x]][[3]]$overall[1])
testfun <- function(x) {kFitDT[[x]][[3]]$overall[1]) }
testfun <- function(x) {kFitDT[[x]][[3]]$overall[1] }
accuDT <- apply(c(1:3), testfun(x))
accuDT <- apply(c(1:3), function(x) testfun
)
accuDT <- sapply(c(1:3), kFitDT[[x]][[3]]$overall[1])
accuDT <- sapply(c(1:3), function(x) kFitDT[[x]][[3]]$overall[1])
View(accuDT)
testdata <- c(2,5,3)
testdata <- as.data.frame(a = 3, b = 2, c = 2.5)
testdata <- as.data.frame(c(a = 3, b = 2, c = 2.5))
View(testdata)
testdata <- as.data.frame(c(3,2,1))
testdata <- as.data.frame(3,2,1
)
testdata <- as.data.frame(c(3,2,1))
testdata <- c(3,2,1)
testdata <- data.frame(c(a = 3, b = 2, c = 2.5))
max(testdata)
which(max(testdata))
which(testdata == max(testdata))
?df
df[which.max(testdata),]
df[which.max(testdata)]
testdata[which.max(testdata),]
testdata[which.max(testdata)]
which.max(testdata)
testdata[testdata == max(testdata)]
row.names( testdata[testdata == max(testdata)])
rownames( testdata[testdata == max(testdata)])
rownames( testdata[testdata == max(testdata),])
row.names( testdata[testdata == max(testdata),])
ans <- row.names( testdata[testdata == max(testdata),])
ans
row.names(kFitDT)
rownames( testdata)
rownames( testdata[3])
rownames( testdata[3,])
testdata <- data.frame(value = c(a = 3, b = 2, c = 2.5))
rownames( testdata[3,])
testdata[3,]
rownames(testing)
View(testing)
rownames(testing[testing$X == max(testing$X),]))
rownames(testing[testing$X == max(testing$X),])
a = 2.5
c = 3
b = 1
data.frame(a,b,c)
testdata <- data.frame(a,b,c)
colnames(testdata[testdata$ == max(testdata))
colnames(testdata[testdata == max(testdata))
colnames(testdata[testdata == max(testdata)])
colnames(testdata)
colnames(testdata[]2)
colnames(testdata[2])
colnames(testdata[testdata == max(testdata)])
testdata[testdata == max(testdata)]
testdata == max(testdata)
colnames(testdata[which(testdata == max(testdata))])
kFitDT[[1]][[2]]
predDT <- data.frame(k1 = kFitRF[[1]][[2]], k2 = kFitRF[[2]][[2]], k3 = kFitRF[[3]][[2]],readData = )
predDT <- data.frame(k1 = kFitDT[[1]][[2]], k2 = kFitDT[[2]][[2]], k3 = kFitDT[[3]][[2]])
fitDT1 <- kFitDT[[1]][[1]]
fitDT2 <- kFitDT[[2]][[1]]
fitDT3 <- kFitDT[[3]][[1]]
predDT <- data.frame(
k1 = predict(fitDT1, training),
k2 = predict(fitDT2, training),
k3 = predict(fitDT3, training) )
View(predDT)
predDT <- data.frame(
k1 = predict(fitDT1, training),
k2 = predict(fitDT2, training),
k3 = predict(fitDT3, training),)
predDT <- data.frame(
k1 = predict(fitDT1, training),
k2 = predict(fitDT2, training),
k3 = predict(fitDT3, training), readData = training$classe)
library(caret)
library(dplyr)
fitDT <- train(classe ~ ., data = predDT, method = 'rpart')
fitDT <- train(readData ~ ., data = predDT, method = 'rpart')
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
View(testing)
View(training)
checkNullNa <-  function(x)
{
if(sum(x == '' | is.na(x) | is.null(x)) > 0)
FALSE
else
TRUE
}
selectVar <- apply(training, MARGIN = 2, checkNullNa)
training <- training[selectVar]
testing <- testing[selectVar]
View(testing)
View(training)
training <- training[,-c(1:7)]
testing <- testing[,-c(1:7)]
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
training <- training[selectVar]
testing <- testing[selectVar]
training <- training[,-c(1:7)]  # deleting the date column
testing <- testing[,-c(1:7)]  # deleting the date column
training$classe <- as.factor(training$classe)
testing$classe <- as.factor(testing$classe)
dim(testing)
dim(testing)[2]
testing <- read.csv("pml-testing.csv")
testing <- testing[selectVar]
testing <- testing[,-c(1:7,dim(testing)[2])]
View(testing)
predTestDT <- data.frame(
pred1 = predict(fitDT1, testing),
pred2 = predict(fitDT2, testing),
pred3 = predict(fitDT3, testing) )
View(predTestDT)
predTest <- predict(fitDT, predTestDT)
predTestDT <- data.frame(
k1 = predict(fitDT1, testing),
k2 = predict(fitDT2, testing),
k3 = predict(fitDT3, testing) )
predTest <- predict(fitDT, predTestDT)
View(predTest)
remove(list = ls())
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
set.seed(125)
trainModel <- function(fold, algo) # algo is algorithm
{
# if (algo != 'rf' && algo != 'gbm' && algo != 'nb')
if (algo != 'rf' && algo != 'nb' && algo != 'rpart')
stop('input algorithm name is not a chosen one! Choose from rf, gbm or nb.')
ktraining <- training[-fold,]
ktesting <- training[fold,]
fit <- train(classe ~ .,data = ktraining, method = algo)
kpred <- predict(fit, ktesting)
confMatrx <- confusionMatrix(table(kpred,ktesting$classe))
kModelFit <- list(fit, kpred, confMatrx)
return(kModelFit)
}
checkNullNa <-  function(x)
{
if(sum(x == '' | is.na(x) | is.null(x)) > 0)
FALSE
else
TRUE
}
selectVar <- apply(training, MARGIN = 2, checkNullNa)
training <- training[selectVar]
testing <- testing[selectVar]
training <- training[,-c(1:7)]  # deleting the date column
testing <- testing[,-c(1:7,dim(testing)[2])]  # deleting the date column and ID column of testing data
training$classe <- as.factor(training$classe)
kFolds <- createFolds(training$class, k = 3) # create 5 folds of data
kFitRF <- lapply(kFolds, function(x) trainModel(x, algo = 'rf'))
kFitNB <- lapply(kFolds, function(x) trainModel(x, algo = 'nb'))
kFitDT <- lapply(kFolds, function(x) trainModel(x, algo = 'rpart'))
## getting the accuracy of each algorithmS
accuRF <- sapply(c(1:3), function(x) kFitRF[[x]][[3]]$overall[1])
accuNB <- sapply(c(1:3), function(x) kFitNB[[x]][[3]]$overall[1])
accuDT <- sapply(c(1:3), function(x) kFitDT[[x]][[3]]$overall[1])
accuMatrx <- data.frame(RF = mean(accuRF), NB = mean(accuNB), DT = mean(accuDT))
accuMaxName <- colnames(accuMatrx[which(accuMatrx == max(accuMatrx))])
predRF <- data.frame(k1 = kFitRF[[1]][[2]], k2 = kFitRF[[2]][[2]], k3 = kFitRF[[3]][[2]],readData = )
fitRF1 <- kFitRF[[1]][[1]]
fitRF2 <- kFitRF[[2]][[1]]
fitRF3 <- kFitRF[[3]][[1]]
predRF <- data.frame(
k1 = predict(fitRF1, training),
k2 = predict(fitRF2, training),
k3 = predict(fitRF3, training),
readData = training$classe)
fitRF <- train(readData ~ ., data = predRF, method = 'rt')
predTestRF <- data.frame(
k1 = predict(fitRF1, testing),
k2 = predict(fitRF2, testing),
k3 = predict(fitRF3, testing) )
predFinal <- predict(fitRF, predTestRF)
fitRF <- train(readData ~ ., data = predRF, method = 'rf')
predTestRF <- data.frame(
k1 = predict(fitRF1, testing),
k2 = predict(fitRF2, testing),
k3 = predict(fitRF3, testing) )
predFinal <- predict(fitRF, predTestRF)
View(predFinal)
View(accuMatrx)
trainAccu <- predict(fitRF,predRF)
ls
ls
l
?round
testData <- data.frame(RF = 1.65948, NB = 23.297487, DT = 3.54878951)
testData <- round(data.frame(RF = 1.65948, NB = 23.297487, DT = 3.54878951),3)
View(testdata)
View(testData)
library(kableExtra)
library(knitr)
View(testfun)
View(kFitDT)
View(kFitDT)
accuDT <- sapply(c(1:3), function(x) kFitDT[[x]][[3]]$overall[1])
a <- 1.5454
round(a,3)
round(kFitDT[[1]][[3]]$overall[1],3)
View(testData)
